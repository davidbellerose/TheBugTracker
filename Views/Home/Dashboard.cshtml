@model TheBugTracker.Models.ViewModels.DashboardViewModel

@using Microsoft.AspNetCore.Identity
@using TheBugTracker.Models
@using TheBugTracker.Models.Enums
@using TheBugTracker.Services.Interfaces;
@using TheBugTracker.Services

@inject UserManager<BTUser> UserManager
@inject IBTRolesService RolesService
@inject IImageService ImageService

@inject IBTProjectService ProjectService



@{
    ViewData["Title"] = "Dashboard";
    BTUser btUser = await UserManager.GetUserAsync(User);
}

<div>
    <div class="container-fluid">
        <!-- Info Pills -->
        <span id="stats"><img src="~/image/bar-chart-line.svg" />Stats</span>
        <div class="row">
            <div class="col-lg-3 col-md-6 col-sm-6 pb-2">
                <a asp-action="AllProjects" asp-controller="Projects" style="text-decoration:none">
                    <div class="card text-center pill-projects">
                        <div class="body">
                            <div class="p-15 text-light">
                                <h3>@Model.Projects.Where(p => p.StartDate < DateTime.Now && p.EndDate > DateTime.Now).Count()</h3>
                                <span>Active Projects</span>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
            <div class="col-lg-3 col-md-6 col-sm-6 pb-2">
                <a asp-action="AllTickets" asp-controller="Tickets" style="text-decoration:none">
                    <div class="card text-center pill-tickets">
                        <div class="body">
                            <div class="p-15 text-light">

                                <h3>@Model.Tickets.Count()</h3>
                                <span>Total Tickets</span>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
            <div class="col-lg-3 col-md-6 col-sm-6 pb-2">
                <a asp-action="UnassignedTickets" asp-controller="Tickets" style="text-decoration:none">
                    <div class="card text-center pill-unassigned">
                        <div class="body">
                            <div class="p-15 text-light">
                                <h3>@Model.Tickets.Where(t => string.IsNullOrEmpty(t.DeveloperUserId)).Count()</h3>
                                <span>Unassigned Tickets</span>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
            <div class="col-lg-3 col-md-6 col-sm-6 pb-2">
                <div class="card text-center pill-counts">
                    <div class="body">
                        <div class="p-15 text-light">
                            <h3>
                                @(
                                    Model.Projects.Count()
                                    + Model.Tickets.Count()
                                    + Model.Members.Count()
                                    )
                            </h3>
                            <span>Total Data</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @* TABBED CHARTS *@
        <span id="insights"><img src="~/image/graph-up-arrow.svg" /> Insights</span>
        <ul class="nav nav-tabs d-none d-lg-flex" id="myTab" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link chart-btn active" id="home-tab" data-bs-toggle="tab" data-bs-target="#home-tab-pane" type="button" role="tab" aria-controls="home-tab-pane" aria-selected="true">Projects by Priority</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link chart-btn" id="profile-tab" data-bs-toggle="tab" data-bs-target="#profile-tab-pane" type="button" role="tab" aria-controls="profile-tab-pane" aria-selected="false">Project Ticket Count</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link chart-btn" id="four-tab" data-bs-toggle="tab" data-bs-target="#four-tab-pane" type="button" role="tab" aria-controls="four-tab-pane" aria-selected="false">Tickets by Status</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link chart-btn" id="contact-tab" data-bs-toggle="tab" data-bs-target="#contact-tab-pane" type="button" role="tab" aria-controls="contact-tab-pane" aria-selected="false">Tickets by Priority</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link chart-btn" id="five-tab" data-bs-toggle="tab" data-bs-target="#five-tab-pane" type="button" role="tab" aria-controls="five-tab-pane" aria-selected="false">Project: Tickets vs Developers</button>
            </li>
        </ul>

        @* Projects by Priority *@
        <div class="tab-content accordion" id="myTabContent">
            <div class="tab-pane fade show active accordion-item" id="home-tab-pane" role="tabpanel" aria-labelledby="home-tab" tabindex="0">

                <h2 class="accordion-header d-lg-none" id="headingOne">
                    <button class="accordion-button chart-btn" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                        Projects by Priority
                    </button>
                </h2>
                <div id="collapseOne" class="accordion-collapse collapse show  d-lg-block" aria-labelledby="headingOne" data-bs-parent="#myTabContent">
                    <div class="accordion-body">
                        <div id="projectPriority" style="height: 370px; width: 90%;"></div>
                    </div>
                </div>

            </div>

            @* Project Ticket Count *@
            <div class="tab-pane fade accordion-item" id="profile-tab-pane" role="tabpanel" aria-labelledby="profile-tab" tabindex="0">
                <h2 class="accordion-header d-lg-none" id="headingTwo">
                    <button class="accordion-button chart-btn collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                        Project Ticket Count
                    </button>
                </h2>
                <div id="collapseTwo" class="accordion-collapse collapse d-lg-block" aria-labelledby="headingTwo" data-bs-parent="#myTabContent">
                    <div class="accordion-body d-flex justify-content-center align-items-center">
                        <div class="chart-container">
                            <div id="ticketCount" style="height: 370px; width: 90%;"></div>
                        </div>
                    </div>
                </div>
            </div>

            @* Tickets by Status *@
            <div class="tab-pane fade accordion-item" id="four-tab-pane" role="tabpanel" aria-labelledby="contact-tab" tabindex="0">
                <h2 class="accordion-header d-lg-none" id="headingFour">
                    <button class="accordion-button chart-btn collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFour" aria-expanded="false" aria-controls="collapseFour">
                        Tickets by Status
                    </button>
                </h2>
                <div id="collapseFour" class="accordion-collapse collapse d-lg-block" aria-labelledby="headingFour" data-bs-parent="#myTabContent">
                    <div class="accordion-body">
                        <div class="chart-container">
                            <canvas id="ticketStatus" style="height: 70%; width: auto;"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            @* Tickets by Priority *@
            <div class="tab-pane fade accordion-item" id="contact-tab-pane" role="tabpanel" aria-labelledby="contact-tab" tabindex="0">
                <h2 class="accordion-header d-lg-none" id="headingThree">
                    <button class="accordion-button chart-btn collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                        Tickets by Priority
                    </button>
                </h2>
                <div id="collapseThree" class="accordion-collapse collapse d-lg-block" aria-labelledby="headingThree" data-bs-parent="#myTabContent">
                    <div class="accordion-body">
                        <div id="ticketPriority" style="height: 370px; width: 90%;"></div>
                    </div>
                </div>
            </div>

            @* Tickets vs Developers *@
            <div class="tab-pane fade accordion-item" id="five-tab-pane" role="tabpanel" aria-labelledby="contact-tab" tabindex="0">
                <h2 class="accordion-header d-lg-none" id="headingFive">
                    <button class="accordion-button chart-btn collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseFive" aria-expanded="false" aria-controls="collapseFive">
                        Project: Tickets vs Developers
                    </button>
                </h2>
                <div id="collapseFive" class="accordion-collapse collapse d-lg-block" aria-labelledby="headingFive" data-bs-parent="#myTabContent">
                    <div class="accordion-body">
                        <div id="ticketVDeveloper" style="height: 370px; width: 100%;"></div>
                    </div>
                </div>
            </div>
        </div>
        @* END TABBED CHARTS *@
    </div>

    @* *********************************************************************

    PROJECT CARDS

    ***************************************************************************@
    <span id="projectsIcon"><i class="bi-file-earmark-ppt"></i> Recent Projects</span>

    <div class="dashboard-project-container">
        <ul class="responsive-table">
            <li class="table-header">
                <div class="col col-1">Title</div>
                <div class="col col-2">Project Manager</div>
                <div class="col col-3">Priority</div>
                <div class="col col-4">Start Date</div>
                <div class="col col-5">End Date</div>
            </li>
            @foreach (var project in Model.Projects.OrderByDescending(d => d.StartDate).Take(8))
            {
                BTUser projectManager = await ProjectService.GetProjectManagerAsync(project.Id);
                <li class="table-row">
                    <div class="col col-1" data-label="Project">
                        <a asp-action="Details" asp-controller="Projects" asp-route-id="@project.Id" style="color:black">
                            <strong>@project.Name</strong>
                        </a>
                    </div>
                    <div class="col col-2" data-label="Project Manager">
                        @if (projectManager != null)
                        {
                            <span>@projectManager.FullName</span>
                        }
                        else
                        {
                            <span><i>Unassigned</i></span>
                        }
                    </div>
                    <div class="col col-3" data-label="Priority Status">@project.ProjectPriority?.Name</div>
                    <div class="col col-4" data-label="Start Date">@project.StartDate.ToString("MM/dd/yyyy")</div>
                    <div class="col col-5" data-label="End Date">@project.EndDate.ToString("MM/dd/yyyy")</div>
                </li>
            }
        </ul>
    </div>
    @* END PROJECTS *@
    <div class="mt-5">
        <div class="row">

            @* *********************************************************************

            TICKET CARDS

            ***************************************************************************@
            <span id="ticketsIcon"><i class="bi-file-earmark-font"></i> Recent Tickets</span>

            <div class="dashboard-ticket-container">
                <ul class="responsive-table">
                    <li class="table-header">
                        <div class="col col-1">Title</div>
                        <div class="col col-2">Developer</div>
                        <div class="col col-3">Type</div>
                        <div class="col col-4">Priority</div>
                        <div class="col col-5">Status</div>
                        <div class="col col-6">Date</div>
                    </li>
                    @foreach (var ticket in Model.Tickets.OrderByDescending(d => d.Created).Take(10))
                    {
                        <li class="table-row">
                            <div class="col col-1" data-label="Ticket">
                                <a asp-action="Details" asp-controller="Tickets" asp-route-id="@ticket.Id" style="color:black"><strong>@ticket.Title</strong></a>
                            </div>
                            <div class="col col-2" data-label="Developer">
                                @if (ticket.DeveloperUserId != null)
                                {
                                    @ticket.DeveloperUser?.FullName
                                }
                                else
                                {
                                    <span><i>Unassigned</i></span>
                                }
                            </div>
                            @* TICKET TYPE *@
                            @if (@ticket.TicketType.Name == "NewDevelopment")
                            {
                                <div class="col col-3" data-label="Ticket Type">New Development</div>
                            }
                            else if (@ticket.TicketType.Name == "WorkTask")
                            {
                                <div class="col col-3" data-label="Ticket Type">Work Task</div>
                            }
                            else if (@ticket.TicketType.Name == "ChangeRequest")
                            {
                                <div class="col col-3" data-label="Ticket Type">Change Request</div>
                            }
                            else if (@ticket.TicketType.Name == "GeneralTask")
                            {
                                <div class="col col-3" data-label="Ticket Type">General Task</div>
                            }
                            else
                            {
                                <div class="col col-3" data-label="Ticket Type">@ticket.TicketType.Name</div>
                            }
                            @* TICKET PRIORITY *@
                            <div class="col col-4" data-label="Ticket Status">@ticket.TicketPriority.Name</div>
                            @* TICKET STATUS *@
                            <div class="col col-5" data-label="Ticket Status">@ticket.TicketStatus.Name</div>
                            <div class="col col-6" data-label="Date">
                                @ticket.Created.ToString("MM/dd/yyyy")
                            </div>
                        </li>
                    }
                </ul>
            </div>
            @* END TICKETS *@
        </div>
        @* *********************************************************************

        MEMBER CARDS

        ***************************************************************************@
    </div>
    <span id="ticketsIcon"><img src="~/image/person-rolodex.svg" />Members</span>
    <div class="members-container p-5 pt-0">
        <div class="row row-cols-1 row-cols-md-2 gy-3">

            <!--       start card -->
            @foreach (BTUser members in Model.Members.OrderBy(d => d.LastName))
            {
                <div class="col">
                    <div class="card">
                        <div class="row">
                            <div class="col-sm-4 d-flex justify-content-start align-items-center">
                                <!-- <div class=""> -->
                                <div class="img">
                                    @if (members.AvatarFileData != null)
                                    {
                                        <img id="imageFileData" class="img-fluid img-thumbnail" style="width:80px;height:80px;" src="@ImageService.DecodeImage(members.AvatarFileData!, members.AvatarFileContentType!)" />
                                    }
                                    else
                                    {
                                        <img id="imageFileData" class="img-fluid img-thumbnail" src="~/image/defaultUserImage.png" alt="User Image" style="width:100px;height:80px;" />
                                    }
                                </div>
                                <!-- </div> -->
                            </div>
                            <div class="col-sm-8">
                                <div class="card-body">
                                    <div class="clearfix mb-3">
                                    </div>
                                    <div class="my-2">
                                        <h3>@members.FullName</h3>
                                    </div>
                                    <div class="mb-3">
                                        <h5 class="text-uppercase role">@((await RolesService.GetUserRolesAsync(members)).FirstOrDefault())</h5>
                                        @* <h2 class="text-uppercase text-center role">@((await RolesService.GetUserRolesAsync(members)).FirstOrDefault())</h2> *@
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!--           end card -->
            }
        </div>
    </div>
    @* ---------------- *@
</div>
@* END MEMBERS *@


@section scripts {
    @***
***********************************************************************************

PROJECT PRIORITY               chart.js                              PROJECT PRIORITY

****************************************************************************************** *@

    <script src="https://cdn.canvasjs.com/canvasjs.min.js"></script>
    <script>
        window.onload = function () {
            $.ajax({
                type: "POST",
                url: "/Home/ProjectPriority",
                data: '{}',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: onSuccess,
                error: onError
            });

            function onSuccess(data) {
                CanvasJS.addColorSet("colors",
                    [//colorSet Array

                        "#008000",
                        "#ff8c00",
                        "#ff0000",
                        "#ff00ff"
                    ]);

                var chart = new CanvasJS.Chart("projectPriority", {
                    theme: "light2", // "light1", "light2", "dark1", "dark2"
                    colorSet: "colors",
                    exportEnabled: true,
                    legend: {
                        verticalAlign: "center",
                        horizontalAlign: "right",
                        fontSize: 20,
                        fontFamily: "Helvetica",
                        dockInsidePlotArea: false
                    },
                    options: {
                        responsive: false
                    },
                    animationEnabled: false,
                    data: [{
                        type: "pie",
                        startAngle: 25,
                        toolTipContent: "<b>{label}</b>: {y}",
                        showInLegend: "true",
                        legendText: "{label}",
                        indexLabelFontSize: 16,
                        indexLabel: "{label} - {y}",
                        dataPoints: data
                    }]
                });
                chart.render();

                $(".chart-btn").click(function () {
                    chart.render();
                });
            }
            function onError(err) {
                console.log(err);
            };

        }
    </script>


    @*
*************************************************************************************

PROJECT TICKET COUNT               canvas.js                   PROJECT TICKET COUNT

****************************************************************************************** *@

    <script>
        // window.onload = function () {
        // const ticketCount = document.getElementById('ticketCount');

        $.ajax({
            type: "POST",
            url: "/Home/ProjectTicketCount",
            data: '{}',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: onSuccess,
            error: onError
        });

        function onSuccess(data) {
            var chart = new CanvasJS.Chart("ticketCount", {
                theme: "light1", // "light1", "light2", "dark1"
                animationEnabled: true,
                exportEnabled: true,
                height: 370,
                axisX: {
                    margin: 10,
                    labelPlacement: "inside",
                    tickPlacement: "inside"
                },
                axisY2: {
                    // title: "Views (in billion)",
                    titleFontSize: 14,
                    includeZero: true,
                    // suffix: "bn"
                },
                options: {
                    responsive: false
                },
                data: [{
                    type: "bar",
                    axisYType: "secondary",
                    yValueFormatString: "#",
                    indexLabel: "{y}",
                    dataPoints: data
                }]
            });

            chart.render();

            $(".chart-btn").click(function () {
                chart.render();
            });
        }
        function onError(err) {
            console.log(err);
        }
    </script>



    @*
*************************************************************************************

TICKET PRIORITY               canvas.js                              TICKET PRIORITY
not working
finish ajax
****************************************************************************************** *@
    <script>

        CanvasJS.addColorSet("colors",
            [//colorSet Array

                "#008000",
                "#ff8c00",
                "#ff0000",
                "#ff00ff"
            ]);
        var chart = new CanvasJS.Chart("ticketPriority", {
            animationEnabled: true,
            theme: "light2", // "light1", "light2", "dark1", "dark2",
            colorSet: "colors",
            toolTip: {
                enabled: true,
                animationEnabled: true,
                shared: false
            },
            data: [{
                type: "column",
                yValueFormatString: "#",
                dataPoints: [
                    { label: "@nameof(BTTicketStatus.Development)", y: @Model.Tickets.Where(t => t.TicketStatus.Name == nameof(BTTicketStatus.Development)).Count() },
                    { label: "@nameof(BTTicketStatus.New)", y: @Model.Tickets.Where(t => t.TicketStatus.Name == nameof(BTTicketStatus.New)).Count()},
                    { label: "@nameof(BTTicketStatus.Resolved)", y: @Model.Tickets.Where(t => t.TicketStatus.Name == nameof(BTTicketStatus.Resolved)).Count() },
                    { label: "@nameof(BTTicketStatus.Testing)", y: @Model.Tickets.Where(t => t.TicketStatus.Name == nameof(BTTicketStatus.Testing)).Count() },
                ]
            }]
        });
        chart.render();

        $(".chart-btn").click(function () {
            chart.render();
        });
    </script>

    @*
*************************************************************************************

TICKET STATUS               canvas.js                              TICKET STATUS

****************************************************************************************** *@
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.6.0/dist/chart.min.js"></script>
    <script>

        var donutChartCanvas = document.getElementById('ticketStatus').getContext('2d');
        var donutData = {
            labels: [
                '@nameof(BTTicketStatus.New)',
                '@nameof(BTTicketStatus.Development)',
                '@nameof(BTTicketStatus.Testing)',
                '@nameof(BTTicketStatus.Resolved)'
            ],
            datasets: [
                {
                    data: [
        @Model.Tickets.Where(t => t.TicketStatus.Name == nameof(BTTicketStatus.New)).Count(),
        @Model.Tickets.Where(t => t.TicketStatus.Name == nameof(BTTicketStatus.Development)).Count(),
        @Model.Tickets.Where(t => t.TicketStatus.Name == nameof(BTTicketStatus.Testing)).Count(),
        @Model.Tickets.Where(t => t.TicketStatus.Name == nameof(BTTicketStatus.Resolved)).Count()
                                                                                                                                                                                                                                                                    ],
                    backgroundColor: [
                        'rgba(138, 218, 178, 0.9)',
                        'rgba(56, 135, 190, 0.9)',
                        'rgba(56, 65, 157, 0.9)',
                        'rgba(32, 14, 58, 0.9)',
                    ],
                    borderColor: [
                        'rgba(138, 218, 178, 1)',
                        'rgba(56, 135, 190, 1)',
                        'rgba(56, 65, 157, 1)',
                        'rgba(32, 14, 58, 1)',
                    ]
                }
            ]
        };

        var donutOptions = {
            maintainAspectRatio: false,
            responsive: true,
            plugins: {
                legend: {
                    position: 'right'
                },
                tooltip: { enabled: true }
            },
        };
        //Create pie or douhnut chart
        // You can switch between pie and douhnut using the method below.
        new Chart(donutChartCanvas, {
            type: 'doughnut',
            data: donutData,
            options: donutOptions
        });
    </script>


    @*****
*********************************************************************************

TICKET V DEVELOPERS              amcharts                              TICKET V DEVELOPERS

****************************************************************************************** *@
    <!-- *** Begin AM Charts *** -->
    <!-- Resources -->
    <script src="https://cdn.amcharts.com/lib/4/core.js"></script>
    <script src="https://cdn.amcharts.com/lib/4/charts.js"></script>

    <!-- Chart code -->
    <script>
        $.ajax({
            type: "POST",
            url: "/Home/TicketVDeveloper",
            data: '{}',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                am4core.ready(function () {

                    // Themes begin
                    // Themes end

                    // Create chart instance
                    var chart = am4core.create("ticketVDeveloper", am4charts.XYChart);
                    chart.responsive.enabled = false;

                    // Add data
                    chart.data = result;

                    // Create axes
                    var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
                    categoryAxis.dataFields.category = "project";
                    categoryAxis.numberFormatter.numberFormat = "#";
                    categoryAxis.renderer.inversed = true;
                    categoryAxis.renderer.grid.template.location = 0;
                    categoryAxis.renderer.cellStartLocation = 0.1;
                    categoryAxis.renderer.cellEndLocation = 0.9;
                    categoryAxis.renderer.minGridDistance = 20;
                    categoryAxis.renderer.minWidth = 120;

                    var valueAxis = chart.xAxes.push(new am4charts.ValueAxis());
                    valueAxis.renderer.opposite = true;
                    valueAxis.renderer.maxLabelPosition = 0.98;

                    // Create series
                    function createSeries(field, name) {
                        var series = chart.series.push(new am4charts.ColumnSeries());
                        series.dataFields.valueX = field;
                        series.dataFields.categoryY = "project";
                        series.name = name;
                        series.columns.template.tooltipText = "{name}: [bold]{valueX}[/]";
                        series.columns.template.height = am4core.percent(100);
                        series.sequencedInterpolation = true;

                        var valueLabel = series.bullets.push(new am4charts.LabelBullet());
                        valueLabel.label.text = "{valueX}";
                        valueLabel.label.horizontalCenter = "left";
                        valueLabel.label.dx = 10;
                        valueLabel.label.hideOversized = false;
                        valueLabel.label.truncate = false;
                        series.sequencedInterpolation = true;
                        series.defaultState.transitionDuration = 1000;
                        series.sequencedInterpolationDelay = 100;


                        chart.cursor = new am4charts.XYCursor();
                        chart.cursor.behavior = "zoomY";

                        var categoryLabel = series.bullets.push(new am4charts.LabelBullet());
                        categoryLabel.label.text = "{name}";
                        categoryLabel.label.horizontalCenter = "right";
                        categoryLabel.label.dx = -10;
                        categoryLabel.label.fill = am4core.color("#fff");
                        categoryLabel.label.hideOversized = false;
                        categoryLabel.label.truncate = false;

                        // Set up tooltip
                        series.adapter.add("tooltipText", function (text) {
                            var text = "[bold]{dateX}[/]\n"
                            chart.series.each(function (item) {
                                if (!item.isHidden) {
                                    text += "[" + item.stroke.hex + "]●[/] " + item.name + ": {" + item.dataFields.valueY + "}\n";
                                }
                            });
                            return text;
                        });

                        series.tooltip.getFillFromObject = false;
                        series.tooltip.background.fill = am4core.color("#fff");
                        series.tooltip.label.fill = am4core.color("#00");

                        // Prevent cross-fading of tooltips
                        series.tooltip.defaultState.transitionDuration = 0;
                        series.tooltip.hiddenState.transitionDuration = 0;

                        // var bullet = series.bullets.push(new am4charts.CircleBullet());
                        // bullet.circle.stroke = am4core.color("#fff");
                        // bullet.circle.strokeWidth = 2;

                    }

                    createSeries("tickets", "Tickets");
                    createSeries("developers", "Devs");

                    chart.cursor.maxTooltipDistance = 0;

                }); // end am4core.ready()


            },
            failure: function (result) {
                alert(result.d);
            },
            error: function (result) {
                alert(result.d);
            }
        });
    </script>
}